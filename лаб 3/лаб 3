#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

class Point {
protected:
    double x, y;
public:
    Point(double x = 0, double y = 0) : x(x), y(y) {}
    virtual ~Point() = default;

    virtual void draw() const = 0;
    virtual void erase() const = 0;
    virtual void move(double dx, double dy) {
        x += dx;
        y += dy;
    }

    virtual void rotate(double angle) = 0;

    double getX() const { return x; }
    double getY() const { return y; }
};

class Line : public Point {
protected:
    double x2, y2;
public:
    Line(double x1, double y1, double x2, double y2) : Point(x1, y1), x2(x2), y2(y2) {}

    void draw() const override {
        cout << "Линия (" << x << ", " << y << ") to (" << x2 << ", " << y2 << ")\n";
    }

    void erase() const override {
        cout << "Стереть\n";
    }

    void move(double dx, double dy) override {
        Point::move(dx, dy);
        x2 += dx;
        y2 += dy;
    }

    void rotate(double angle) override {
        cout << "Поворот\n";
    }
};

class Shape : public Point {
protected:
    vector<pair<double, double>> vertices;
public:
    Shape(double x, double y, const vector<pair<double, double>>& points) : Point(x, y), vertices(points) {}

    void draw() const override {
        cout << "Координаты: ";
        for (const auto& v : vertices) {
            cout << "(" << v.first << ", " << v.second << ") ";
        }
        cout << endl;
    }

    void erase() const override {
        cout << "Стереть\n";
    }

    void move(double dx, double dy) override {
        Point::move(dx, dy);
        for (auto& v : vertices) {
            v.first += dx;
            v.second += dy;
        }
    }

    void rotate(double angle) override {
    }
};

class Square : public Shape {
public:
    Square(double x, double y, double size)
        : Shape(x, y, { {x, y}, {x + size, y}, {x + size, y + size}, {x, y + size} }) {}

    void draw() const override {
        cout << "Квадрат: ";
        Shape::draw();
    }
};

class Rectangle : public Shape {
public:
    Rectangle(double x, double y, double width, double height)
        : Shape(x, y, { {x, y}, {x + width, y}, {x + width, y + height}, {x, y + height} }) {}

    void draw() const override {
        cout << "Прямоугольник: ";
        Shape::draw();
    }
};

class Parallelogram : public Square {
public:
    Parallelogram(double x, double y, double size)
        : Square(x, y, size) {}

    void draw() const override {
        cout << "Параллелограмм: ";
        Shape::draw();
    }
};

class Rhombus : public Shape {
public:
    Rhombus(double x, double y, double diagonal1, double diagonal2)
        : Shape(x, y, { {x, y}, {x + diagonal1 / 2, y + diagonal2 / 2}, 
                                 {x, y + diagonal2}, {x - diagonal1 / 2, y + diagonal2 / 2} }) {}

    void draw() const override {
        cout << "Ромб: ";
        Shape::draw();
    }
};

int main() {
    Square square(0, 0, 2);
    Rectangle rectangle(1, 1, 3, 2);
    Parallelogram parallelogram(2, 2, 3);
    Rhombus rhombus(0, 0, 4, 6);
    
    cout << "Изображение:\n";
    square.draw();
    rectangle.draw();
    parallelogram.draw();
    rhombus.draw();

    cout << "\nПередвижение:\n";
    square.move(1, 1);
    rectangle.move(2, 2);
    parallelogram.move(3, 3);
    rhombus.move(4, 4);

    square.draw();
    rectangle.draw();
    parallelogram.draw();
    rhombus.draw();

    cout << "\nПоворот:\n";
    square.rotate(3.14 / 4);
    rectangle.rotate(3.14 / 6);
    parallelogram.rotate(3.14 / 8);
    rhombus.rotate(3.14 / 3);

    square.draw();
    rectangle.draw();
    parallelogram.draw();
    rhombus.draw();

    return 0;
}
